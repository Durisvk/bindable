{"version":3,"sources":["../src/Core/Runtime.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAS5B,MAAM,cAAc,GAAoB;IACpC,YAAY,EAAE,GAAG;CACpB,CAAA;AAGD;IAWI,YAAmB,OAAyB;QAPpC,UAAK,GAAa,KAAK,CAAC;QAExB,cAAS,GAAoB,EAAE,CAAC;QAChC,eAAU,GAAoB,EAAE,CAAC;QAEjC,eAAU,GAAY,CAAC,CAAC;QAG5B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;IACxD,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAEO,IAAI;QACR,MAAM,SAAS,GAAY,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAChD,UAAU,CAAC,GAAG,EAAE;YACZ,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;gBAEpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;QACL,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAEO,QAAQ,CAAC,KAAsB,EAAE,SAAkB;QACvD,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;YACtB,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,QAAQ,CAAC,QAAuB;QACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAEM,SAAS,CAAC,SAAwB;QACrC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;CAEJ;AApDD,0BAoDC","file":"Runtime.js","sourcesContent":["import * as _ from 'lodash';\n\n\nexport type RuntimeOptions = {\n    tickInterval?: number // Milliseconds for every tick\n};\n\nexport type TickCallback = (dt? : number, i? : number) => void;\n\nconst defaultOptions : RuntimeOptions = {\n    tickInterval: 500,\n}\n\n\nexport class Runtime {\n\n    private options : RuntimeOptions;\n\n    private _stop : boolean = false;\n\n    private nextTicks : TickCallback[] = [];\n    private everyTicks : TickCallback[] = [];\n\n    private ticksCount : number = 0;\n\n    public constructor(options? : RuntimeOptions) {\n        this.options = _.merge({}, defaultOptions, options);\n    }\n\n    public start() : void {\n        this._stop = false;\n        this.tick();\n    }\n\n    public stop() : void {\n        this._stop = true;\n    }\n\n    private tick() : void {\n        const tickStart : number = new Date().getTime();\n        setTimeout(() => {\n            if(!this._stop) {\n                this.ticksCount++;\n                this.runTicks(this.nextTicks, tickStart);\n                this.nextTicks = [];\n                \n                this.runTicks(this.everyTicks, tickStart);\n                this.tick();\n            }\n        }, this.options.tickInterval);\n    }\n\n    private runTicks(ticks : TickCallback[], tickStart : number) {\n        _.forEach(ticks, (tick) => {\n            tick(new Date().getTime() - tickStart, this.ticksCount);\n        });\n    }\n\n    public nextTick(nextTick : TickCallback) {\n        this.nextTicks.push(nextTick);\n    }\n\n    public everyTick(everyTick : TickCallback) {\n        this.everyTicks.push(everyTick);\n    }\n\n}"]}