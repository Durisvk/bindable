{"version":3,"sources":["../src/Core/Actor.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAK5B,2CAA4C;AAE5C;IAII,YAAmB,SAAqB;QACpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAGM,KAAK,CAAC,OAAuB,EAAE,KAAW;QAC7C,MAAM,aAAa,GAAG,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC3C,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAe,EAAE,EAAW,EAAE,EAAE;YAC7E,MAAM,GAAG,GAAG,EAAE,CAAC;YACf,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,MAAoB,EAAE,EAAE;gBAC9C,EAAE,CAAA,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBACd,MAAM,CAAC,GAAgC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,iBAAS,CAAC,GAAG,EAAE,CAAC,CAAC;oBAC7F,EAAE,CAAA,CAAC,CAAC,YAAY,OAAO,CAAC,CAAC,CAAC;wBACtB,kDAAkD;oBACtD,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;wBACV,MAAM,CAAC;oBACX,CAAC;gBACL,CAAC;gBAED,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,OAAO,GAAS,GAAG,CAAC;gBACxB,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAY,EAAE,CAAU,EAAE,EAAE;oBAC7C,EAAE,CAAA,CAAC,CAAC,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC3B,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC;oBACnC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;wBAClB,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC3B,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CAEJ;AArCD,sBAqCC","file":"Actor.js","sourcesContent":["import * as _ from 'lodash';\n\nimport { ChangedData } from './Watcher'\nimport { WebSocket } from './WebSocket';\nimport * as WebSocket_ from 'ws';\nimport { DIRECTION } from '../Guards/guard';\n\nexport class Actor {\n\n    private websocket : WebSocket;\n\n    public constructor(websocket : WebSocket) {\n        this.websocket = websocket;\n    }\n\n\n    public flush(changes : ChangedData[], model : any) : void {\n        const copiedChanges = _.cloneDeep(changes);\n        _.forEach(this.websocket.getActiveClientsIds(), (ws : WebSocket_, id : string) => {\n            const obj = {};\n            _.forEach(copiedChanges, (change : ChangedData) => {\n                if(change.guard) {\n                    const g : boolean | Promise<boolean> = change.guard(model, id, { direction: DIRECTION.OUT });\n                    if(g instanceof Promise) {\n                        // TODO: add asynchronous functionality for guards\n                    } else if(g) {\n                        return;\n                    }\n                }\n\n                const pathKeys = change.path.split('.');\n                let current : any = obj;\n                _.forEach(pathKeys, (key : string, i : number) => {\n                    if(i === pathKeys.length - 1) {\n                        current[key] = change.newValue;\n                    } else {\n                        current[key] = {};\n                        current = current[key];\n                    }\n                });\n            });\n        });\n    }\n\n}"]}