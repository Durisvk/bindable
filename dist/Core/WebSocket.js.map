{"version":3,"sources":["../src/Core/WebSocket.ts"],"names":[],"mappings":"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","file":"WebSocket.js","sourcesContent":["import * as WebSocket_ from 'ws';\nimport * as _ from 'lodash';\n\nimport ErrorUtils from '../Utils/Error';\n\nconst ServerEvents = {\n    CONNECT: 'connect',\n}\n\nconst ClientEvents = {\n    CLOSE: 'CLOSE',\n    MESSAGE: 'message',\n}\n\nexport type ServerOptions = WebSocket_.ServerOptions;\n\nexport class WebSocket {\n\n    private wss : WebSocket_.Server;\n    private activeClients : { [ id : string ] : WebSocket_ } = {};\n\n    private onMessage : (id : string | Symbol, data : {}) => any = () => {};\n    private onError : (error : Error) => any = () => {};\n    //private onConnect : (id : string | Symbol, )\n\n\n    public constructor(options : WebSocket_.ServerOptions) {\n        this.wss = new WebSocket_.Server(options);\n        this.init();\n    }\n\n    public OnMessage(callback : (id : string | Symbol, data : {}) => any) : void {\n        this.onMessage = callback;\n    }\n\n    public OnError(callback : (error : Error) => any) : void {\n        this.onError = callback;\n    }\n\n    private init() : void {\n        this.wss.on(ServerEvents.CONNECT, (ws : WebSocket_) => {\n            let id : string;\n            while(id && _.has(this.activeClients, id)) {\n                id = _.uniqueId('wsc_');\n            }\n            this.activeClients[id] = ws;\n\n            ws.on(ClientEvents.CLOSE, (code : number, reason : string) => {\n                delete this.activeClients[id];\n            });\n\n            ws.on(ClientEvents.MESSAGE, (data : string | Buffer | ArrayBuffer) => {\n                const possibleJson = _.attempt(JSON.parse, data.toString());\n                possibleJson instanceof Error\n                    ? this.onError(ErrorUtils.prependMessage(possibleJson, 'ws-bindable:Core/WebSockets Failed to parse received message: '))\n                    : this.onMessage(id, possibleJson)\n            });\n        });\n    }\n\n    public broadcast(data : object, predicate? : (id : string, client : WebSocket_) => boolean) : void {\n        const _p : (id : string, client : WebSocket_) => boolean = predicate || (() => true);\n        _.forEach(this.activeClients, (client : WebSocket_, id : string) =>\n            client.readyState === WebSocket_.OPEN && _p(id, client)\n                ? client.send(data)\n                : _.noop());\n    }\n\n    public send(id : string, data : object) {\n        this.activeClients[id].send(data, (err : Error) => {\n            this.onError(ErrorUtils.prependMessage(err, 'ws-bindable:Core/WebSockets Failed to send a message: '));\n        });\n    }\n\n    public getActiveClientsIds() : { [ id : string ] : WebSocket_ } {\n        return { ...this.activeClients };\n    }\n\n}"]}